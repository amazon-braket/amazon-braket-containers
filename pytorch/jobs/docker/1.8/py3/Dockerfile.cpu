# This is based loosely on :
# https://github.com/aws/amazon-sagemaker-examples/blob/master/advanced_functionality/custom-training-containers/script-mode-container/docker/Dockerfile

FROM public.ecr.aws/ubuntu/ubuntu:18.04

MAINTAINER Amazon Braket <amazon-braket-dev@amazon.com>

# prevent stopping by user interaction
ENV DEBIAN_FRONTEND noninteractive
ENV DEBCONF_NONINTERACTIVE_SEEN true

ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV PYTHONIOENCODING=UTF-8
ENV LANG=C.UTF-8
ENV LC_ALL=C.UTF-8

ARG PYTHON=python3.7
ARG PYTHON_PIP=python3-pip
ARG PIP=pip3
ARG PYTHON_VERSION=3.7.10

RUN apt-get update \
 && apt-get install -y --no-install-recommends \
    build-essential \
    openssh-client \
    openssh-server \
    ca-certificates \
    curl \
    git \
    libtemplate-perl \
    libssl1.1 \
    openssl \
    unzip \
    wget \
    zlib1g-dev \
    # Install dependent library for OpenCV
    libgtk2.0-dev \
 && rm -rf /var/lib/apt/lists/*

# Install Open MPI
RUN mkdir /tmp/openmpi \
 && cd /tmp/openmpi \
 && curl -fSsL -O https://download.open-mpi.org/release/open-mpi/v4.0/openmpi-4.0.4.tar.gz \
 && tar zxf openmpi-4.0.4.tar.gz \
 && cd openmpi-4.0.4 \
 && ./configure --enable-orterun-prefix-by-default \
 && make -j $(nproc) all \
 && make install \
 && ldconfig \
 && rm -rf /tmp/openmpi

# Create a wrapper for OpenMPI to allow running as root by default
RUN mv /usr/local/bin/mpirun /usr/local/bin/mpirun.real \
 && echo '#!/bin/bash' > /usr/local/bin/mpirun \
 && echo 'mpirun.real --allow-run-as-root "$@"' >> /usr/local/bin/mpirun \
 && chmod a+x /usr/local/bin/mpirun

RUN echo "hwloc_base_binding_policy = none" >> /usr/local/etc/openmpi-mca-params.conf \
 && echo "rmaps_base_mapping_policy = slot" >> /usr/local/etc/openmpi-mca-params.conf

ENV LD_LIBRARY_PATH=/usr/local/openmpi/lib:/usr/local/lib:$LD_LIBRARY_PATH
ENV PATH /usr/local/openmpi/bin/:$PATH

# SSH login fix. Otherwise user is kicked off after login
RUN sed 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd

# Create SSH key.
RUN mkdir -p /root/.ssh/ \
 && mkdir -p /var/run/sshd \
 && ssh-keygen -q -t rsa -N '' -f /root/.ssh/id_rsa \
 && cp /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys \
 && printf "Host *\n  StrictHostKeyChecking no\n" >> /root/.ssh/config

RUN apt-get update \
 && apt-get install -y --no-install-recommends \
    libbz2-dev \
    libc6-dev \
    libffi-dev \
    libgdbm-dev \
    liblzma-dev \
    libncursesw5-dev \
    libreadline-gplv2-dev \
    libsqlite3-dev \
    libssl-dev \
    tk-dev \
 && rm -rf /var/lib/apt/lists/* \
 && apt-get clean

# Installing Python3
RUN wget https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tgz \
 && tar -xvf Python-$PYTHON_VERSION.tgz \
 && cd Python-$PYTHON_VERSION \
 && ./configure && make && make install \
 && rm -rf ../Python-$PYTHON_VERSION*

# Upgrading pip and creating symbolic link for python3
RUN ${PIP} --no-cache-dir install --upgrade pip setuptools
RUN ln -s $(which ${PYTHON}) /usr/local/bin/python \
 && ln -s $(which ${PIP}) /usr/bin/pip

WORKDIR /

RUN apt-get update && apt-get -y install cmake protobuf-compiler

# Installing our custom python libraries
RUN ${PIP} install --no-cache --upgrade \
        amazon-braket-default-simulator==1.2.1 \
        amazon-braket-ocean-plugin==1.0.4 \
        amazon-braket-schemas==1.2.2 \
        amazon-braket-sdk==1.7.1 \
        amazon-braket-pennylane-plugin==1.3.0 \
        awscli==1.18.121 \
        botocore==1.17.44 \
        decorator==4.4.0 \
        dask==2.30.0 \
        dwave-ocean-sdk==3.3.0 \
        ipykernel==5.3.4 \
        jinja2==2.11.3 \
        keras==2.4.3 \
        matplotlib==3.2.2 \
        markupsafe==1.1.1 \
        networkx==2.4 \
        numpy==1.19.2 \
        openfermion==1.0.0 \
        pandas==1.1.4 \
        PennyLane==0.16.0 \
        PennyLane-Qchem==0.16.0 \
        protobuf==3.12.4 \
        pydantic==1.7 \
        requests==2.21.0 \
        rsa==4.4.1 \
        scikit-learn==0.20.3 \
        six==1.15.0 \
        scipy==1.5.2 \
        torch==1.6.0 \
        typing_extensions==3.7.4.3

RUN ${PIP} install --no-cache --upgrade sagemaker-training

# Some packages can not be installed using pip (because they are not
# python managed packages) - so we need Conda to install and use them.
# See: https://www.anaconda.com/blog/understanding-conda-and-pip

ENV _ANACONDA_ARCHIVE_URL=https://repo.anaconda.com/archive
ENV _MINICONDA_ARCHIVE_URL=https://repo.anaconda.com/miniconda

ENV CONDA_INSTALLER=Anaconda3-2020.11-Linux-x86_64.sh
ENV CONDA_INSTALLER_URL="$_ANACONDA_ARCHIVE_URL/$CONDA_INSTALLER"
ENV CONDA_INSTALLER_MD5=4cd48ef23a075e8555a8b6d0a8c4bae2
ENV CONDA_INSTALL_DIR="$HOME/Braket/anaconda3"

RUN wget --quiet "$CONDA_INSTALLER_URL" --output-document "$CONDA_INSTALLER"
RUN echo "$CONDA_INSTALLER_MD5  $CONDA_INSTALLER" | md5sum --status --check -
RUN chmod a+x $CONDA_INSTALLER
RUN ./$CONDA_INSTALLER -b -p $CONDA_INSTALL_DIR

ENV PATH="$CONDA_INSTALL_DIR/bin:$PATH"
RUN conda config --system --append channels conda-forge
RUN conda config --system --append channels psi4

RUN conda update conda
RUN conda install -c conda-forge python=$PYTHON_VERSION
RUN conda install -y -c anaconda \
    openbabel==3.1.1=py37h200e996_1 \
    psi4=1.3.2+ecbda83
RUN conda clean -ya

# Setup our entry point

COPY braket_container.py /opt/ml/code/braket_container.py

ENV SAGEMAKER_PROGRAM braket_container.py
