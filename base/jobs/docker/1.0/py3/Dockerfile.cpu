# Builder stage for compiling and installing dependencies
FROM public.ecr.aws/docker/library/python:3.10-slim as builder

# Set environment variables to minimize interactions and cleanup
ENV DEBIAN_FRONTEND=noninteractive \
    DEBCONF_NONINTERACTIVE_SEEN=true \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    openssh-client \
    openssh-server \
    ca-certificates \
    curl \
    wget \
    libssl-dev \
    libffi-dev \
    zlib1g-dev \
    # Install dependent library for OpenCV
    libgtk2.0-dev \
    tk-dev \
    # Python install tools
    gcc \
    musl-dev \
    linux-headers \
    && rm -rf /var/lib/apt/lists/*

# Download and install OpenMPI
RUN mkdir /tmp/openmpi && cd /tmp/openmpi \
    && wget https://download.open-mpi.org/release/open-mpi/v4.0/openmpi-4.0.4.tar.gz \
    && tar zxf openmpi-4.0.4.tar.gz && cd openmpi-4.0.4 \
    && ./configure --enable-orterun-prefix-by-default \
    && make -j $(nproc) all \
    && make install \
    && ldconfig \
    && rm -rf /tmp/openmpi

RUN pip install wheel && pip wheel

# Runtime stage
FROM public.ecr.aws/docker/library/python:3.10

# Copy installed Python and OpenMPI from the builder stage
COPY --from=builder /usr/local /usr/local

# Set environment variables
ENV LANG=C.UTF-8 \
    LC_ALL=C.UTF-8 \
    PATH=/usr/local/bin:$PATH

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    libssl-dev \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Prepare environment for OpenMPI and Python application
COPY --from=builder /usr/local/bin/mpirun /usr/local/bin/mpirun
COPY --from=builder /usr/local/etc/openmpi-mca-params.conf /usr/local/etc/openmpi-mca-params.conf

# Set working directory and copy necessary files for the application
WORKDIR /app
COPY requirements.txt ./
COPY braket_container.py /opt/ml/code/

# Install Python packages
RUN pip install --no-cache-dir -r requirements.txt

# Set default command or entry point
ENV SAGEMAKER_PROGRAM braket_container.py

# Clean up
RUN apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

CMD ["python3", "/opt/ml/code/braket_container.py"]
