FROM public.ecr.aws/lts/ubuntu:22.04 AS builder
LABEL maintainer="Amazon Braket"
LABEL major_version="1"

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive \
    PYTHONUNBUFFERED=1 \
    LANG=C.UTF-8 \
    LC_ALL=C.UTF-8

# Install Python and pip
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3-pip \
    python3-dev \
    build-essential \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy the dependencies file
COPY requirements.txt /

# Install Python dependencies
RUN pip3 install --no-cache-dir --upgrade pip setuptools \
    && pip3 install --no-cache-dir -r requirements.txt

# Install OSS compliance tools
RUN HOME_DIR=/root \
    && curl -o ${HOME_DIR}/oss_compliance.zip https://aws-dlinfra-utilities.s3.amazonaws.com/oss_compliance.zip \
    && unzip ${HOME_DIR}/oss_compliance.zip -d ${HOME_DIR}/ \
    && cp ${HOME_DIR}/oss_compliance/test/testOSSCompliance /usr/local/bin/testOSSCompliance \
    && chmod +x /usr/local/bin/testOSSCompliance \
    && chmod +x ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh \
    && ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh ${HOME_DIR} python3 \
    && rm -rf ${HOME_DIR}/oss_compliance*


# Stage 1: Final Image
FROM public.ecr.aws/lts/ubuntu:22.04
LABEL maintainer="Amazon Braket"
LABEL major_version="1"

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive \
    PYTHONUNBUFFERED=1 \
    LANG=C.UTF-8 \
    LC_ALL=C.UTF-8

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    openssh-client \
    openssh-server \
    ca-certificates \
    curl \
    git \
    libtemplate-perl \
    libssl3 \
    openssl \
    unzip \
    libgtk2.0-dev \
    python3-pip \
    libopenmpi-dev \
    && rm -rf /var/lib/apt/lists/*

# SSH login fix and key generation
RUN sed -i 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' /etc/pam.d/sshd \
    && mkdir -p /root/.ssh/ /var/run/sshd \
    && ssh-keygen -q -t rsa -N '' -f /root/.ssh/id_rsa \
    && cp /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys \
    && printf "Host *\n  StrictHostKeyChecking no\n" >> /root/.ssh/config

# Copy Python dependencies from the builder stage
COPY --from=builder /usr/local/lib/python3.10 /usr/local/lib/python3.10
COPY --from=builder /usr/local/bin/pip3 /usr/local/bin/pip3
COPY --from=builder /usr/local/bin/testOSSCompliance /usr/local/bin/testOSSCompliance

# Ensure Python links are correct
RUN ln -s /usr/bin/python3 /usr/local/bin/python \
    && ln -s /usr/bin/python3 /usr/local/bin/python3

# Install Open MPI wrapper to allow running as root
RUN mv /usr/bin/mpirun /usr/bin/mpirun.real \
    && echo '#!/bin/bash' > /usr/bin/mpirun \
    && echo 'mpirun.real --allow-run-as-root "$@"' >> /usr/bin/mpirun \
    && chmod a+x /usr/bin/mpirun

# Set Open MPI configurations
RUN echo "hwloc_base_binding_policy = none" >> /etc/openmpi/openmpi-mca-params.conf \
    && echo "rmaps_base_mapping_policy = slot" >> /etc/openmpi/openmpi-mca-params.conf

# Set up environment variables
ENV LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu/openmpi/lib:$LD_LIBRARY_PATH \
    PATH=/usr/lib/x86_64-linux-gnu/openmpi/bin:$PATH

# Copy the braket_container.py
COPY braket_container.py /opt/ml/code/braket_container.py
ENV SAGEMAKER_PROGRAM=braket_container.py
