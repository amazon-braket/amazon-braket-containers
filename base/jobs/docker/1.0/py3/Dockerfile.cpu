# This is based loosely on :
# https://github.com/aws/amazon-sagemaker-examples/blob/master/advanced_functionality/custom-training-containers/script-mode-container/docker/Dockerfile

# Stage 1: Build OpenMPI
FROM public.ecr.aws/lts/ubuntu:22.04 AS openmpi-builder

ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    ca-certificates \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install Open MPI v5
RUN mkdir -p /tmp/openmpi && \
    cd /tmp/openmpi && \
    curl -fSsL -O https://download.open-mpi.org/release/open-mpi/v5.0/openmpi-5.0.7.tar.gz && \
    tar zxf openmpi-5.0.7.tar.gz && \
    cd openmpi-5.0.7 && \
    ./configure --enable-orterun-prefix-by-default && \
    make -j $(nproc) all && \
    make install && \
    # Create MPI wrapper in same layer
    mv /usr/local/bin/mpirun /usr/local/bin/mpirun.real && \
    echo '#!/bin/bash' > /usr/local/bin/mpirun && \
    echo 'mpirun.real --allow-run-as-root "$@"' >> /usr/local/bin/mpirun && \
    chmod a+x /usr/local/bin/mpirun && \
    echo "hwloc_base_binding_policy = none" >> /usr/local/etc/openmpi-mca-params.conf && \
    echo "rmaps_base_mapping_policy = slot" >> /usr/local/etc/openmpi-mca-params.conf

# Stage 2: Build Python
FROM public.ecr.aws/lts/ubuntu:22.04 AS python-builder

ENV DEBIAN_FRONTEND=noninteractive
ARG PYTHON_VERSION=3.10.11

RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    ca-certificates \
    wget \
    libssl-dev \
    libbz2-dev \
    libc6-dev \
    libffi-dev \
    libgdbm-dev \
    liblzma-dev \
    libncursesw5-dev \
    libsqlite3-dev \
    tk-dev \
    zlib1g-dev \
    && rm -rf /var/lib/apt/lists/*

# Build Python from ENV version
RUN wget -q https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tgz && \
    tar -xf Python-${PYTHON_VERSION}.tgz && \
    cd Python-${PYTHON_VERSION} && \
    ./configure --enable-optimizations --with-lto --without-doc-strings && \
    make -j $(nproc) && \
    make install && \
    python3 -m pip --no-cache-dir install --upgrade pip setuptools wheel && \
    rm -rf /Python-${PYTHON_VERSION}*

# Stage 3: Build Python wheels separately
FROM python-builder AS wheel-builder

WORKDIR /wheels
COPY requirements.txt .

# Build the wheels
RUN pip3 wheel --no-cache-dir --wheel-dir=/wheels -r requirements.txt --no-build-isolation

# Final Stage
FROM public.ecr.aws/lts/ubuntu:22.04

LABEL maintainer="Amazon Braket"
LABEL major_version="1"

# Set ENV variables
ENV DEBIAN_FRONTEND=noninteractive \
    DEBCONF_NONINTERACTIVE_SEEN=true \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONIOENCODING=UTF-8 \
    LANG=C.UTF-8 \
    LC_ALL=C.UTF-8 \
    LD_LIBRARY_PATH=/usr/local/openmpi/lib:/usr/local/lib:$LD_LIBRARY_PATH \
    PATH=/usr/local/openmpi/bin/:$PATH \
    SAGEMAKER_PROGRAM=braket_container.py

# Copy build artifacts from previous stages
COPY --from=openmpi-builder /usr/local /usr/local
COPY --from=python-builder /usr/local /usr/local
COPY --from=wheel-builder /wheels /wheels

# Install apt-get dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    openssh-client \
    openssh-server \
    build-essential \
    ca-certificates \
    curl \
    git \
    libtemplate-perl \
    libssl3 \
    openssl \
    unzip \
    libgtk2.0-dev \
    cmake \
    protobuf-compiler \
    && rm -rf /var/lib/apt/lists/* \
    # SSH setup in same layer to reduce image size
    && sed 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd \
    && mkdir -p /root/.ssh/ /var/run/sshd \
    && ssh-keygen -q -t rsa -N '' -f /root/.ssh/id_rsa \
    && cp /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys \
    && printf "Host *\n  StrictHostKeyChecking no\n" >> /root/.ssh/config \
    # Python symbolic links
    && ln -sf $(which python3) /usr/local/bin/python \
    && ln -sf $(which pip3) /usr/bin/pip

WORKDIR /

# Install python dependencies from requirements.txt
COPY requirements.txt /
RUN pip3 install --no-cache-dir --no-index --find-links=/wheels -r requirements.txt && \
    rm -rf /wheels

# Run OSS compliance
RUN HOME_DIR=/root \
    && curl -o ${HOME_DIR}/oss_compliance.zip https://aws-dlinfra-utilities.s3.amazonaws.com/oss_compliance.zip \
    && unzip ${HOME_DIR}/oss_compliance.zip -d ${HOME_DIR}/ \
    && cp ${HOME_DIR}/oss_compliance/test/testOSSCompliance /usr/local/bin/testOSSCompliance \
    && chmod +x /usr/local/bin/testOSSCompliance ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh \
    && ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh ${HOME_DIR} python3 \
    && rm -rf ${HOME_DIR}/oss_compliance*

# Setup entry point
COPY braket_container.py /opt/ml/code/braket_container.py
RUN python -m py_compile /opt/ml/code/braket_container.py
