# This is based loosely on :
# https://github.com/aws/amazon-sagemaker-examples/blob/master/advanced_functionality/custom-training-containers/script-mode-container/docker/Dockerfile

# Stage 1: Build OpenMPI
FROM public.ecr.aws/lts/ubuntu:22.04 AS openmpi-builder

ENV DEBIAN_FRONTEND=noninteractive
ENV OPENMPI_VERSION=5.0.7

# Install build dependencies and install OpenMPI
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    ca-certificates \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && mkdir -p /tmp/openmpi \
    && cd /tmp/openmpi \
    && curl -fSsL -O https://download.open-mpi.org/release/open-mpi/v5.0/openmpi-${OPENMPI_VERSION}.tar.gz \
    && tar zxf openmpi-${OPENMPI_VERSION}.tar.gz \
    && cd openmpi-${OPENMPI_VERSION} \
    && ./configure --enable-orterun-prefix-by-default \
                  --disable-debug \
                  --enable-shared \
                  --disable-mpi-fortran \
                  --disable-oshmem \
                  --prefix=/usr/local \
    && make -j $(nproc) all \
    && make install \
    && mv /usr/local/bin/mpirun /usr/local/bin/mpirun.real \
    && echo '#!/bin/bash\nmpirun.real --allow-run-as-root "$@"' > /usr/local/bin/mpirun \
    && chmod a+x /usr/local/bin/mpirun \
    && echo -e "hwloc_base_binding_policy = none\nrmaps_base_mapping_policy = slot" >> /usr/local/etc/openmpi-mca-params.conf \
    && cd / \
    && rm -rf /tmp/openmpi \
    && find /usr/local -type f -executable -exec strip --strip-unneeded {} \; || true

# Stage 2: Build Python
FROM public.ecr.aws/lts/ubuntu:22.04 AS python-builder

ENV DEBIAN_FRONTEND=noninteractive \
    PYTHON_VERSION=3.10.11

# Install build dependencies and Python
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    ca-certificates \
    wget \
    libssl-dev \
    libbz2-dev \
    libc6-dev \
    libffi-dev \
    libgdbm-dev \
    liblzma-dev \
    libncursesw5-dev \
    libsqlite3-dev \
    tk-dev \
    zlib1g-dev \
    && rm -rf /var/lib/apt/lists/* \
    && cd /tmp \
    && wget -q https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tgz \
    && tar -xf Python-${PYTHON_VERSION}.tgz \
    && cd Python-${PYTHON_VERSION} \
    && ./configure --enable-optimizations \
                  --with-lto \
                  --without-doc-strings \
                  --prefix=/usr/local \
    && make -j $(nproc) \
    && make install \
    && python3 -m pip --no-cache-dir install --upgrade pip setuptools wheel \
    && cd / \
    && rm -rf /tmp/Python-${PYTHON_VERSION}* \
    && find /usr/local -type f -executable -exec strip --strip-unneeded {} \; || true \
    && find /usr/local -type f -name "*.a" -delete \
    && find /usr/local -type f -name "*.la" -delete \
    && rm -rf /usr/local/share/doc /usr/local/share/man /usr/local/share/info

# Final Stage
FROM public.ecr.aws/lts/ubuntu:22.04

LABEL maintainer="Amazon Braket" \
      major_version="1"

ENV DEBIAN_FRONTEND=noninteractive \
    DEBCONF_NONINTERACTIVE_SEEN=true \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONIOENCODING=UTF-8 \
    LANG=C.UTF-8 \
    LC_ALL=C.UTF-8 \
    LD_LIBRARY_PATH=/usr/local/openmpi/lib:/usr/local/lib:$LD_LIBRARY_PATH \
    PATH=/usr/local/openmpi/bin/:$PATH \
    SAGEMAKER_PROGRAM=braket_container.py

# Copy from previous stages
COPY --from=openmpi-builder /usr/local /usr/local
COPY --from=python-builder /usr/local /usr/local

# Install build deps
RUN apt-get update && apt-get install -y --no-install-recommends \
    openssh-client \
    openssh-server \
    build-essential \
    ca-certificates \
    curl \
    git \
    libtemplate-perl \
    libssl3 \
    openssl \
    unzip \
    libgtk2.0-dev \
    cmake \
    protobuf-compiler \
    && rm -rf /var/lib/apt/lists/* \
              /usr/share/doc \
              /usr/share/man \
              /usr/share/locale \
              /var/cache/debconf \
              /var/lib/dpkg/info \
              /var/log/* \
    && rm -rf /usr/local/lib/*.a \
    && sed 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd \
    && mkdir -p /root/.ssh/ /var/run/sshd \
    && ssh-keygen -q -t rsa -N '' -f /root/.ssh/id_rsa \
    && cp /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys \
    && printf "Host *\n  StrictHostKeyChecking no\n" >> /root/.ssh/config \
    && ln -sf $(which python3) /usr/local/bin/python \
    && ln -sf $(which pip3) /usr/bin/pip

WORKDIR /

# Install Python dependencies
COPY requirements.txt /
RUN pip3 install --no-cache-dir -r requirements.txt \
    && rm -rf /root/.cache/pip \
    && find /usr/local/lib/python* -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true

# Run compliance script
RUN curl -o /root/oss_compliance.zip https://aws-dlinfra-utilities.s3.amazonaws.com/oss_compliance.zip \
    && unzip /root/oss_compliance.zip -d /root/ \
    && cp /root/oss_compliance/test/testOSSCompliance /usr/local/bin/testOSSCompliance \
    && chmod +x /usr/local/bin/testOSSCompliance /root/oss_compliance/generate_oss_compliance.sh \
    && /root/oss_compliance/generate_oss_compliance.sh /root python3 \
    && rm -rf /root/oss_compliance*

# Entry script
COPY braket_container.py /opt/ml/code/braket_container.py
